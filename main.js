  // AI ‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§° ‡§∏‡§≤‡§æ‡§π ‡§´‡§Ç‡§ï‡•ç‡§∂‡§®
    function aiPasswordRecommendation(password) {
      const commonPatterns = ["123456", "password", "qwerty", "abc123", "password1"];
      const specialChars = /[!@#$%^&*(),.?":{}|<>]/;
      const upperCase = /[A-Z]/;
      const lowerCase = /[a-z]/;
      const numbers = /[0-9]/;
      
      let score = 0;
      let advice = "‡§Ø‡§π ‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§° ‡§†‡•Ä‡§ï ‡§π‡•à, ‡§≤‡•á‡§ï‡§ø‡§® ‡§á‡§∏‡•á ‡§î‡§∞ ‡§¨‡•á‡§π‡§§‡§∞ ‡§¨‡§®‡§æ‡§Ø‡§æ ‡§ú‡§æ ‡§∏‡§ï‡§§‡§æ ‡§π‡•à!";
      let improvementTips = [];

      // ‡§¨‡§π‡•Å‡§§ ‡§π‡•Ä ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§° ‡§ö‡•á‡§ï ‡§ï‡§∞‡§®‡§æ
      if (commonPatterns.some(pattern => password.toLowerCase().includes(pattern))) {
        advice = "‚ö†Ô∏è ‡§Ø‡§π ‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§° ‡§¨‡§π‡•Å‡§§ ‡§π‡•Ä ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§π‡•à, ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§¨‡§¶‡§≤‡•á‡§Ç!";
        score -= 2;
      }

      // ‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§° ‡§ï‡•Ä ‡§≤‡§Ç‡§¨‡§æ‡§à ‡§ö‡•á‡§ï ‡§ï‡§∞‡§®‡§æ
      if (password.length >= 8) score += 2;
      if (password.length >= 12) score += 3;
      if (password.length >= 16) score += 5;
      else {
        improvementTips.push("‚úÖ ‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§° ‡§ï‡•ã 12-14 ‡§Ö‡§ï‡•ç‡§∑‡§∞‡•ã‡§Ç ‡§∏‡•á ‡§¨‡§°‡§º‡§æ ‡§ï‡§∞‡•á‡§Ç‡•§");
      }

      // ‡§Ö‡§™‡§∞ ‡§î‡§∞ ‡§≤‡•ã‡§Ö‡§∞ ‡§ï‡•á‡§∏ ‡§ö‡•á‡§ï ‡§ï‡§∞‡§®‡§æ
      if (upperCase.test(password) && lowerCase.test(password)) {
        score += 2;
      } else {
        improvementTips.push("‚úÖ ‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§° ‡§Æ‡•á‡§Ç ‡§¨‡§°‡§º‡•á ‡§î‡§∞ ‡§õ‡•ã‡§ü‡•á ‡§Ö‡§ï‡•ç‡§∑‡§∞ ‡§Æ‡§ø‡§≤‡§æ‡§ï‡§∞ ‡§¨‡§®‡§æ‡§è‡§Ç‡•§");
      }

      // ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ‡§è‡§Å ‡§ö‡•á‡§ï ‡§ï‡§∞‡§®‡§æ
      if (numbers.test(password)) {
        score += 2;
      } else {
        improvementTips.push("‚úÖ ‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§° ‡§Æ‡•á‡§Ç ‡§ï‡§Æ ‡§∏‡•á ‡§ï‡§Æ ‡§è‡§ï ‡§®‡§Ç‡§¨‡§∞ ‡§ú‡•ã‡§°‡§º‡•á‡§Ç‡•§");
      }

      // ‡§µ‡§ø‡§∂‡•á‡§∑ ‡§Ö‡§ï‡•ç‡§∑‡§∞ ‡§ö‡•á‡§ï ‡§ï‡§∞‡§®‡§æ
      if (specialChars.test(password)) {
        score += 3;
      } else {
        improvementTips.push("‚úÖ ‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§° ‡§Æ‡•á‡§Ç ‡§∏‡•ç‡§™‡•á‡§∂‡§≤ ‡§ï‡•à‡§∞‡•á‡§ï‡•ç‡§ü‡§∞ (!@#$%^&) ‡§ú‡•ã‡§°‡§º‡•á‡§Ç‡•§");
      }

      // ‡§∏‡•ç‡§ï‡•ã‡§∞ ‡§ï‡•ã 1-10 ‡§ï‡•á ‡§¨‡•Ä‡§ö ‡§∏‡•Ä‡§Æ‡§ø‡§§ ‡§ï‡§∞‡§®‡§æ
      if (score < 1) score = 1;
      if (score > 10) score = 10;

      // ‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§° ‡§ï‡•Ä ‡§§‡§æ‡§ï‡§§ ‡§ï‡•á ‡§π‡§ø‡§∏‡§æ‡§¨ ‡§∏‡•á ‡§∏‡§≤‡§æ‡§π ‡§¶‡•á‡§®‡§æ
      let strength = "";
      if (score <= 3) {
        strength = "‚ö†Ô∏è Very week";
        advice = "‡§ì ‡§≠‡§æ‡§à! ‡§á‡§§‡§®‡§æ ‡§ï‡§Æ‡§ú‡•ã‡§∞ ‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§°? ‡§Ø‡§π ‡§§‡•ã ‡§ï‡•ã‡§à ‡§≠‡•Ä ‡§ó‡•á‡§∏ ‡§ï‡§∞ ‡§≤‡•á‡§ó‡§æ! üòÖ";
      } else if (score <= 6) {
        strength = "üü° normal";
        advice = "‡§Ø‡§π ‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§° ‡§†‡•Ä‡§ï ‡§π‡•à, ‡§≤‡•á‡§ï‡§ø‡§® ‡§•‡•ã‡§°‡§º‡§æ ‡§î‡§∞ ‡§Æ‡•á‡§π‡§®‡§§ ‡§ï‡§∞‡•ã! üòé";
      } else if (score <= 8) {
        strength = "üü¢Good";
        advice = "‡§¨‡§¢‡§º‡§ø‡§Ø‡§æ! ‡§Ö‡§¨ ‡§ï‡•ã‡§à ‡§á‡§∏‡•á ‡§Ü‡§∏‡§æ‡§®‡•Ä ‡§∏‡•á ‡§®‡§π‡•Ä‡§Ç ‡§§‡•ã‡§°‡§º ‡§™‡§æ‡§è‡§ó‡§æ‡•§ üîí";
      } else {
        strength = "‚úÖ Very strong";
        advice = "‡§ï‡§Æ‡§æ‡§≤ ‡§π‡•à! ‡§Ø‡§π ‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§° ‡§¨‡§π‡•Å‡§§ ‡§π‡•Ä ‡§Æ‡§ú‡§¨‡•Ç‡§§ ‡§π‡•à! üöÄ";
      }
      // ‡§â‡§¶‡§æ‡§π‡§∞‡§£ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§ï ‡§∏‡•Å‡§ù‡§æ‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§° (‡§°‡§Æ‡•Ä)
      let suggestedPassword = "DummySuggested123!";

      return { score, strength, advice, improvementTips, suggestedPassword };
    }

    // ‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§° ‡§∏‡•ç‡§ü‡•ç‡§∞‡•á‡§Ç‡§• ‡§ö‡•á‡§ï ‡§´‡§Ç‡§ï‡•ç‡§∂‡§®
    function checkStrength() {
      let password = document.getElementById("password").value;
      let strengthBar = document.getElementById("strength-bar");
      let result = document.getElementById("result");
      let aiAdvice = document.getElementById("ai-advice");
      let strength = 0;

      if (password.length >= 8) strength++;
      if (/[A-Z]/.test(password)) strength++;
      if (/[0-9]/.test(password)) strength++;
      if (/[^A-Za-z0-9]/.test(password)) strength++;

      let colors = ["red", "orange", "yellow", "green"];
      strengthBar.style.background = colors[strength];

      if (!password) {
        result.innerHTML = "‚ùå Plise Enter your Password!";
        aiAdvice.innerHTML = "";
        return;
      }

      let entropy = calculateEntropy(password);
      let crackTime = calculateCrackTime(entropy);
      let superTime = superComputerTime(entropy);

      result.innerHTML = `
            üõ°Estimated cracking time. <b>${crackTime}</b><br>
            üñ•Ô∏è Normal Computer: ${crackTime} <br>
            üöÄSuper Computer: ${superTime}
        `;
      
      let recommendation = aiPasswordRecommendation(password);
      aiAdvice.innerHTML = recommendation.advice;
      document.getElementById("strengthScore").innerHTML = `üìä Score: ${recommendation.score}/10 (${recommendation.strength})`;
    }

    // ‡§è‡§Ç‡§ü‡•ç‡§∞‡•ã‡§™‡•Ä ‡§ï‡•à‡§≤‡§ï‡•Å‡§≤‡•á‡§∂‡§®
    function calculateEntropy(password) {
      let charset = 0;
      if (/[a-z]/.test(password)) charset += 26;
      if (/[A-Z]/.test(password)) charset += 26;
      if (/[0-9]/.test(password)) charset += 10;
      if (/[^a-zA-Z0-9]/.test(password)) charset += 32;

      return password.length * Math.log2(charset);
    }

    // ‡§ï‡•ç‡§∞‡•à‡§ï ‡§ü‡§æ‡§á‡§Æ ‡§ï‡•à‡§≤‡§ï‡•Å‡§≤‡•á‡§∂‡§® (‡§®‡•â‡§∞‡•ç‡§Æ‡§≤ ‡§ï‡§Ç‡§™‡•ç‡§Ø‡•Ç‡§ü‡§∞)
    function calculateCrackTime(entropy) {
      let seconds = Math.pow(2, entropy) / 1000000;
      let years = seconds / (60 * 60 * 24 * 365);

      if (years < 0.00001) return "üìâ It will be cracked immediately";
      if (years < 1) return `${Math.round(years * 12)}Month`;
      if (years < 100) return `${Math.round(years)} Year`;
      return `${Math.round(years / 1000)}000+ Year üî•`;
    }

    // ‡§ï‡•ç‡§∞‡•à‡§ï ‡§ü‡§æ‡§á‡§Æ ‡§ï‡•à‡§≤‡§ï‡•Å‡§≤‡•á‡§∂‡§® (‡§∏‡•Å‡§™‡§∞ ‡§ï‡§Ç‡§™‡•ç‡§Ø‡•Ç‡§ü‡§∞)
    function superComputerTime(entropy) {
      let seconds = Math.pow(2, entropy) / 1000000000;
      let years = seconds / (60 * 60 * 24 * 365);

      if (years < 0.00001) return "üìâ Instantly cracked!";
      if (years < 1) return `${Math.round(years * 12)}Month `;
      if (years < 100) return `${Math.round(years)} Year`;
      return `${Math.round(years / 1000)}000+ Year üöÄ`;
    }

    // ‡§´‡§º‡§ø‡§∂‡§ø‡§Ç‡§ó ‡§ö‡•á‡§ï ‡§´‡§Ç‡§ï‡•ç‡§∂‡§®
    function checkPhishing() {
      let url = document.getElementById("urlInput").value.trim();
      let resultBox = document.getElementById("phishing-result");

      try {
        let domain = new URL(url).hostname;
        let blacklist = ["phishingsite.com", "fakebank.com"];

        if (blacklist.includes(domain)) {
          resultBox.innerHTML = `‚ö†Ô∏è ‡§Ø‡§π ‡§µ‡•á‡§¨‡§∏‡§æ‡§á‡§ü ‡§ñ‡§§‡§∞‡§®‡§æ‡§ï ‡§π‡•à!`;
          resultBox.className = "phishing-warning";
        } else {
          resultBox.innerHTML = `‚úÖ ‡§µ‡•á‡§¨‡§∏‡§æ‡§á‡§ü ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§≤‡§ó‡§§‡•Ä ‡§π‡•à‡•§`;
          resultBox.className = "";
        }
      } catch (error) {
        resultBox.innerHTML = "‚ùå ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Æ‡§æ‡§®‡•ç‡§Ø URL ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç!";
        resultBox.className = "phishing-warning";
      }
    }

    // ‡§Æ‡§ú‡§¨‡•Ç‡§§ ‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§° ‡§ú‡§®‡§∞‡•á‡§ü ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ ‡§´‡§Ç‡§ï‡•ç‡§∂‡§®
    function generateStrongPassword(oldPassword) {
      let chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_=+";
      let strongPassword = "";

      for (let i = 0; i < 12; i++) {
        strongPassword += chars.charAt(Math.floor(Math.random() * chars.length));
      }

      if (/\d{4}/.test(oldPassword)) {
        strongPassword = strongPassword.replace(/\d/, "@");
      }
      if (/^[a-zA-Z]+$/.test(oldPassword)) {
        strongPassword += "1!";
      }

      return strongPassword;
    }

    function suggestStrongPassword() {
      let oldPassword = document.getElementById("password").value;
      document.getElementById("suggested-password").innerText = generateStrongPassword(oldPassword);
    }
    async function checkBreach() {
    let password = document.getElementById("password").value;
    let hash = await crypto.subtle.digest("SHA-1", new TextEncoder().encode(password));
    let hashHex = Array.from(new Uint8Array(hash)).map(b => b.toString(16).padStart(2, "0")).join("").toUpperCase();
    let prefix = hashHex.slice(0, 5);
    
    let response = await fetch(`https://api.pwnedpasswords.com/range/${prefix}`);
    let text = await response.text();

    let breached = text.includes(hashHex.slice(5));
    document.getElementById("breach-result").innerText = breached ? "‚ö†Ô∏è This password has been leaked bef" : "‚úÖ The password seems secure!";
}
    
   function openMyPage() {
  window.open("openpage.html", "_blank");
}
   function Chatbot() {
     window.open("Chatbot.html", "_blank");
   }
   function fishing() {
     window.open("fishing.html", "_blank");
   }
    // ‡§°‡§æ‡§∞‡•ç‡§ï ‡§Æ‡•ã‡§° ‡§ü‡•â‡§ó‡§≤ ‡§´‡§Ç‡§ï‡•ç‡§∂‡§®
    function toggleDarkMode() {
      document.body.classList.toggle("dark-mode");
    }

    // ‡§™‡•á‡§ú ‡§≤‡•ã‡§° ‡§π‡•ã‡§§‡•á ‡§π‡•Ä ‡§∏‡•á‡§µ ‡§ï‡§ø‡§è ‡§ó‡§è ‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§° ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Ç
  showPasswords();