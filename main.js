// AI рдкрд╛рд╕рд╡рд░реНрдб рд╕рд▓рд╛рд╣ рдлрдВрдХреНрд╢рди
function aiPasswordRecommendation(password) {
  const commonPatterns = ["123456", "password", "qwerty", "abc123", "password1"];
  const specialChars = /[!@#$%^&*(),.?":{}|<>]/;
  const upperCase = /[A-Z]/;
  const lowerCase = /[a-z]/;
  const numbers = /[0-9]/;
  
  let score = 0;
  let advice = "рдпрд╣ рдкрд╛рд╕рд╡рд░реНрдб рдареАрдХ рд╣реИ, рд▓реЗрдХрд┐рди рдЗрд╕реЗ рдФрд░ рдмреЗрд╣рддрд░ рдмрдирд╛рдпрд╛ рдЬрд╛ рд╕рдХрддрд╛ рд╣реИ!";
  let improvementTips = [];
  
  // рдмрд╣реБрдд рд╣реА рд╕рд╛рдорд╛рдиреНрдп рдкрд╛рд╕рд╡рд░реНрдб рдЪреЗрдХ рдХрд░рдирд╛
  if (commonPatterns.some(pattern => password.toLowerCase().includes(pattern))) {
    advice = "тЪая╕П рдпрд╣ рдкрд╛рд╕рд╡рд░реНрдб рдмрд╣реБрдд рд╣реА рд╕рд╛рдорд╛рдиреНрдп рд╣реИ, рддреБрд░рдВрдд рдмрджрд▓реЗрдВ!";
    score -= 2;
  }
  
  // рдкрд╛рд╕рд╡рд░реНрдб рдХреА рд▓рдВрдмрд╛рдИ рдЪреЗрдХ рдХрд░рдирд╛
  if (password.length >= 8) score += 2;
  if (password.length >= 12) score += 3;
  if (password.length >= 16) score += 5;
  else {
    improvementTips.push("тЬЕ рдкрд╛рд╕рд╡рд░реНрдб рдХреЛ 12-14 рдЕрдХреНрд╖рд░реЛрдВ рд╕реЗ рдмрдбрд╝рд╛ рдХрд░реЗрдВред");
  }
  
  // рдЕрдкрд░ рдФрд░ рд▓реЛрдЕрд░ рдХреЗрд╕ рдЪреЗрдХ рдХрд░рдирд╛
  if (upperCase.test(password) && lowerCase.test(password)) {
    score += 2;
  } else {
    improvementTips.push("тЬЕ рдкрд╛рд╕рд╡рд░реНрдб рдореЗрдВ рдмрдбрд╝реЗ рдФрд░ рдЫреЛрдЯреЗ рдЕрдХреНрд╖рд░ рдорд┐рд▓рд╛рдХрд░ рдмрдирд╛рдПрдВред");
  }
  
  // рд╕рдВрдЦреНрдпрд╛рдПрдБ рдЪреЗрдХ рдХрд░рдирд╛
  if (numbers.test(password)) {
    score += 2;
  } else {
    improvementTips.push("тЬЕ рдкрд╛рд╕рд╡рд░реНрдб рдореЗрдВ рдХрдо рд╕реЗ рдХрдо рдПрдХ рдирдВрдмрд░ рдЬреЛрдбрд╝реЗрдВред");
  }
  
  // рд╡рд┐рд╢реЗрд╖ рдЕрдХреНрд╖рд░ рдЪреЗрдХ рдХрд░рдирд╛
  if (specialChars.test(password)) {
    score += 3;
  } else {
    improvementTips.push("тЬЕ рдкрд╛рд╕рд╡рд░реНрдб рдореЗрдВ рд╕реНрдкреЗрд╢рд▓ рдХреИрд░реЗрдХреНрдЯрд░ (!@#$%^&) рдЬреЛрдбрд╝реЗрдВред");
  }
  
  // zxcvbn рд╕реЗ рд╕реНрдЯреНрд░реЗрдВрде рдЪреЗрдХ
  const zxcvbnResult = zxcvbn(password);
  score = Math.max(score, zxcvbnResult.score * 2); // zxcvbn рд╕реНрдХреЛрд░ (0-4) рдХреЛ 0-8 рдореЗрдВ рдмрджрд▓реЗрдВ
  const crackTime = zxcvbnResult.crack_times_display.offline_slow_hashing_1e4_per_second;
  
  // рд╕реНрдХреЛрд░ рдХреЛ 1-10 рдХреЗ рдмреАрдЪ рд╕реАрдорд┐рдд рдХрд░рдирд╛
  if (score < 1) score = 1;
  if (score > 10) score = 10;
  
  // рдкрд╛рд╕рд╡рд░реНрдб рдХреА рддрд╛рдХрдд рдХреЗ рд╣рд┐рд╕рд╛рдм рд╕реЗ рд╕рд▓рд╛рд╣ рджреЗрдирд╛
  let strength = "";
  if (score <= 3) {
    strength = "тЪая╕П рдмрд╣реБрдд рдХрдордЬреЛрд░";
    advice = "рдпрд╣ рдкрд╛рд╕рд╡рд░реНрдб рдмрд╣реБрдд рдХрдордЬреЛрд░ рд╣реИ! рдЗрд╕реЗ рддреБрд░рдВрдд рдмрджрд▓реЗрдВ! ЁЯШЕ";
  } else if (score <= 6) {
    strength = "ЁЯЯб рд╕рд╛рдорд╛рдиреНрдп";
    advice = "рдпрд╣ рдкрд╛рд╕рд╡рд░реНрдб рдареАрдХ рд╣реИ, рд▓реЗрдХрд┐рди рдФрд░ рдордЬрдмреВрдд рдХрд░реЗрдВ! ЁЯШО";
  } else if (score <= 8) {
    strength = "ЁЯЯв рдЕрдЪреНрдЫрд╛";
    advice = "рдмрдврд╝рд┐рдпрд╛! рдпрд╣ рдкрд╛рд╕рд╡рд░реНрдб рд╕реБрд░рдХреНрд╖рд┐рдд рд╣реИред ЁЯФТ";
  } else {
    strength = "тЬЕ рдмрд╣реБрдд рдордЬрдмреВрдд";
    advice = "рд╢рд╛рдирджрд╛рд░! рдпрд╣ рдкрд╛рд╕рд╡рд░реНрдб рдмрд╣реБрдд рд╣реА рдордЬрдмреВрдд рд╣реИ! ЁЯЪА";
  }
  
  // рдбрд╛рдпрдирд╛рдорд┐рдХ рдкрд╛рд╕рд╡рд░реНрдб рд╕реБрдЭрд╛рд╡
  const length = parseInt(document.getElementById("passwordLength")?.value) || 16;
  let suggestedPassword = generateStrongPassword(password, length);
  
  return { score, strength, advice, improvementTips, suggestedPassword, crackTime };
}

// рдкрд╛рд╕рд╡рд░реНрдб рд╕реНрдЯреНрд░реЗрдВрде рдЪреЗрдХ рдлрдВрдХреНрд╢рди
function checkStrength() {
  try {
    const password = document.getElementById("password").value;
    const strengthBar = document.getElementById("strength-bar");
    const result = document.getElementById("result");
    const aiAdvice = document.getElementById("ai-advice");
    const strengthScore = document.getElementById("strengthScore");
    const suggestedPassword = document.getElementById("suggested-password");
    
    if (!password) {
      result.innerHTML = "тЭМ рдХреГрдкрдпрд╛ рдкрд╛рд╕рд╡рд░реНрдб рджрд░реНрдЬ рдХрд░реЗрдВ!";
      aiAdvice.innerHTML = "";
      strengthBar.style.background = "gray";
      strengthScore.innerHTML = "";
      suggestedPassword.innerHTML = "";
      return;
    }
    
    const recommendation = aiPasswordRecommendation(password);
    
    // рд╕реНрдЯреНрд░реЗрдВрде рдмрд╛рд░ рдЕрдкрдбреЗрдЯ
    const colors = ["red", "orange", "yellow", "green", "darkgreen"];
    const strengthIndex = Math.min(Math.floor(recommendation.score / 2), 4);
    strengthBar.style.background = colors[strengthIndex];
    
    result.innerHTML = `
      ЁЯЫб рдЕрдиреБрдорд╛рдирд┐рдд рдХреНрд░реИрдХрд┐рдВрдЧ рд╕рдордп: <b>${recommendation.crackTime}</b><br>
    `;
    aiAdvice.innerHTML = recommendation.advice;
    strengthScore.innerHTML = `ЁЯУК рд╕реНрдХреЛрд░: ${recommendation.score}/10 (${recommendation.strength})`;
    suggestedPassword.innerHTML = `тЬи рд╕реБрдЭрд╛рдпрд╛ рдЧрдпрд╛ рдкрд╛рд╕рд╡рд░реНрдб: <b>${recommendation.suggestedPassword}</b>`;
  } catch (error) {
    console.error("рддреНрд░реБрдЯрд┐:", error);
    document.getElementById("result").innerHTML = "тЭМ рдХреБрдЫ рдЧрд▓рдд рд╣реБрдЖ, рдХреГрдкрдпрд╛ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВ!";
  }
}

// рдордЬрдмреВрдд рдкрд╛рд╕рд╡рд░реНрдб рдЬрдирд░реЗрдЯ рдХрд░рдиреЗ рдХрд╛ рдлрдВрдХреНрд╢рди
function generateStrongPassword(oldPassword, length = 16) {
  const chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_=+";
  let strongPassword = "";
  length = Math.max(12, Math.min(length, 32)); // рдиреНрдпреВрдирддрдо 12, рдЕрдзрд┐рдХрддрдо 32
  
  // рдХрдо рд╕реЗ рдХрдо рдПрдХ-рдПрдХ рдЕрдХреНрд╖рд░ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ
  const lower = "abcdefghijklmnopqrstuvwxyz";
  const upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  const number = "0123456789";
  const special = "!@#$%^&*()-_=+";
  
  strongPassword += lower[Math.floor(Math.random() * lower.length)];
  strongPassword += upper[Math.floor(Math.random() * upper.length)];
  strongPassword += number[Math.floor(Math.random() * number.length)];
  strongPassword += special[Math.floor(Math.random() * special.length)];
  
  // рдмрд╛рдХреА рдЕрдХреНрд╖рд░ рд░реИрдВрдбрдо
  for (let i = 4; i < length; i++) {
    strongPassword += chars[Math.floor(Math.random() * chars.length)];
  }
  
  // рдкрд╛рд╕рд╡рд░реНрдб рдХреЛ рд╢рдлрд▓ рдХрд░реЗрдВ
  strongPassword = strongPassword.split("").sort(() => Math.random() - 0.5).join("");
  
  // рдкреБрд░рд╛рдиреЗ рдкрд╛рд╕рд╡рд░реНрдб рдХреЗ рдЖрдзрд╛рд░ рдкрд░ рдЫреЛрдЯреЗ рдмрджрд▓рд╛рд╡
  if (/\d{4}/.test(oldPassword)) {
    strongPassword = strongPassword.replace(/\d/, "@");
  }
  if (/^[a-zA-Z]+$/.test(oldPassword)) {
    strongPassword += "1!";
  }
  
  return strongPassword;
}

// рдкрд╛рд╕рд╡рд░реНрдб рд╕реБрдЭрд╛рд╡ рдлрдВрдХреНрд╢рди
function suggestStrongPassword() {
  const password = document.getElementById("password").value;
  const length = parseInt(document.getElementById("passwordLength")?.value) || 16;
  document.getElementById("suggested-password").innerText = generateStrongPassword(password, length);
}

// рдкрд╛рд╕рд╡рд░реНрдб рдмреНрд░реИрдЪ рдЪреЗрдХ
async function checkBreach() {
  try {
    const password = document.getElementById("password").value;
    const breachResult = document.getElementById("breach-result");
    if (!password) {
      breachResult.innerText = "тЭМ рдХреГрдкрдпрд╛ рдкрд╛рд╕рд╡рд░реНрдб рджрд░реНрдЬ рдХрд░реЗрдВ!";
      return;
    }
    
    const hash = await crypto.subtle.digest("SHA-1", new TextEncoder().encode(password));
    const hashHex = Array.from(new Uint8Array(hash))
      .map(b => b.toString(16).padStart(2, "0"))
      .join("")
      .toUpperCase();
    const prefix = hashHex.slice(0, 5);
    
    const response = await fetch(`https://api.pwnedpasswords.com/range/${prefix}`);
    if (!response.ok) throw new Error("API рдЕрдиреБрд░реЛрдз рд╡рд┐рдлрд▓");
    const text = await response.text();
    
    const breached = text.includes(hashHex.slice(5));
    breachResult.innerText = breached ?
      "тЪая╕П рдпрд╣ рдкрд╛рд╕рд╡рд░реНрдб рдкрд╣рд▓реЗ рд▓реАрдХ рд╣реЛ рдЪреБрдХрд╛ рд╣реИ!" :
      "тЬЕ рдпрд╣ рдкрд╛рд╕рд╡рд░реНрдб рд╕реБрд░рдХреНрд╖рд┐рдд рд╣реИ!";
  } catch (error) {
    document.getElementById("breach-result").innerText = "тЭМ рдмреНрд░реИрдЪ рдЬрд╛рдВрдЪ рдореЗрдВ рддреНрд░реБрдЯрд┐!";
    console.error("рддреНрд░реБрдЯрд┐:", error);
  }
}

// рдбрд╛рд░реНрдХ рдореЛрдб рдЯреЙрдЧрд▓
function toggleDarkMode() {
  document.body.classList.toggle("dark-mode");
}

// рдЕрдиреНрдп рдкреЗрдЬ рдЦреЛрд▓рдиреЗ рдХреЗ рдлрдВрдХреНрд╢рди
function openMyPage() {
  window.open("openpage.html", "_blank");
}

function Chatbot() {
  window.open("Chatbot.html", "_blank");
}
function fishinghtml() {
  window.open("fishing.html", "_blank")
}
function Advancetoolshtml() {
  window.open("Advance tools.html", "_blank")}
  // Ta

// рдкрд╛рд╕рд╡рд░реНрдб рдХреЙрдкреА рдлрдВрдХреНрд╢рди
function copySuggestedPassword() {
  const suggestedPassword = document.getElementById("suggested-password").innerText;
  navigator.clipboard.writeText(suggestedPassword).then(() => {
    alert("рдкрд╛рд╕рд╡рд░реНрдб рдХреЙрдкреА рдХрд┐рдпрд╛ рдЧрдпрд╛!");
  }).catch(err => {
    console.error("рдХреЙрдкреА рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐:", err);
  });
}

// рдкрд╛рд╕рд╡рд░реНрдб рджрд┐рдЦрд╛рдПрдВ/рдЫрд┐рдкрд╛рдПрдВ рдлрдВрдХреНрд╢рди
function togglePasswordVisibility() {
  const passwordInput = document.getElementById("password");
  const toggleIcon = document.getElementById("toggleIcon");
  
  if (passwordInput.type === "password") {
    passwordInput.type = "text";
    toggleIcon.classList.remove("fa-eye");
    toggleIcon.classList.add("fa-eye-slash");
  } else {
    passwordInput.type = "password";
    toggleIcon.classList.remove("fa-eye-slash");
    toggleIcon.classList.add("fa-eye");
  }
}
